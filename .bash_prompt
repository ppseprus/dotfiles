# Below code is heavily inspired by @mathiasbynens" prompt
# https://github.com/mathiasbynens/dotfiles

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM="gnome-256color";
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM="xterm-256color";
fi;

# A variable to reset colors to default
RESET="\e[0m";

# Color schema with 256 colors
# In specific order
# Use the `RESET` variable for default color
# `38;5;colorCode` where `colorCode` is used as a foreground color
# `48;5;colorCode` where `colorCode` is used as a background color
COLOR_SCHEMA=(
	"\e[1;38;5;227m" # 0. username color
	"\e[1;38;5;227m" # 1. host name color
	"\e[1;38;5;043m" # 2. working directory color
	"\e[1;38;5;038m" # 3. git branch color
	"\e[1;38;5;124m" # 4. git flags color
	"${RESET}" # 5. prompt sign color
	"${RESET}" # 6. user/host sign color
);

# Working directory
# Use `\w` for a full working directory
# Use `\W` for the current directory
WORKING_DIRECTORY="\W";

# Git flags are used to show if the Git branch is not clean
# In specific order
GIT_FLAGS=(
	"+"	# 0. uncommited files on branch
	"!"	# 1. unstaged files on branch
	"?"	# 2. untracked files on branch
	"$"	# 3. stashed files on branch
);

# The sign between the user and host names
UH_SIGN="@";

# Before prompt sign
# Use `\n` to prompt in a new line
BEFORE_PROMPT_SIGN=" ";

# The sign at the beginning of a prompt command
PROMPT_SIGN="$";

color() {
	if [ -n ${1} ]; then
		echo -e "\[${1}\]";
	else
		return;
	fi;
};

parse() {
	if [ -n "${2}" ]; then
		if [ -n "${1}" ]; then
			echo -e "$(color ${1})${2}$(color ${RESET})";
		else
			echo -e "${2}";
		fi;
	else
		return;
	fi;
};

git_prompt() {
	# Check if the current directory is in a Git repository
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == "0" ]; then
		local branch="";
		local flags="";

		# Get the short symbolic ref
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up
		branch="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo "unknown")";

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

			# Ensure the index is up to date
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index
			if ! $(git diff --quiet --ignore-submodules --cached); then flags+=${GIT_FLAGS[0]}; fi;

			# Check for unstaged changes
			if ! $(git diff-files --quiet --ignore-submodules --); then flags+=${GIT_FLAGS[1]}; fi;

			# Check for untracked files
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then flags+=${GIT_FLAGS[2]}; fi;

			# Check for stashed files
			if $(git rev-parse --verify refs/stash &>/dev/null); then flags+=${GIT_FLAGS[3]}; fi;

		fi;

		[ -n "${branch}" ] && branch=" ${branch}";
		[ -n "${flags}" ] && flags=" ${flags}";

		echo -e "${1}${branch}${2}${flags}";
	else
		return;
	fi;
};

# Set the terminal title and prompt
PS1="$(parse ${COLOR_SCHEMA[0]} "\u")";
PS1+="$(parse ${COLOR_SCHEMA[6]} ${UH_SIGN})";
PS1+="$(parse ${COLOR_SCHEMA[1]} "\h")";
PS1+=" ";
PS1+="$(parse ${COLOR_SCHEMA[2]} ${WORKING_DIRECTORY})";
PS1+="\$(git_prompt \"$(color ${COLOR_SCHEMA[3]})\" \"$(color ${COLOR_SCHEMA[4]})\")$(color ${RESET})";
PS1+="${BEFORE_PROMPT_SIGN}";
PS1+="$(parse ${COLOR_SCHEMA[5]} ${PROMPT_SIGN})";
PS1+=" ";

export PS1;
