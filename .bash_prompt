# Below code is heavily inspired by @mathiasbynens' prompt
# https://github.com/mathiasbynens/dotfiles

# @mathiasbynens' comments below
# Shell prompt based on the Solarized Dark theme
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

prompt_git() {
	local flags='';
	local branch='';

	# Check if the current directory is in a Git repository
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index
			if ! $(git diff --quiet --ignore-submodules --cached); then flags+='+'; fi;

			# Check for unstaged changes
			if ! $(git diff-files --quiet --ignore-submodules --); then flags+='!'; fi;

			# Check for untracked files
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then flags+='?'; fi;

			# Check for stashed files
			if $(git rev-parse --verify refs/stash &>/dev/null); then flags+='$'; fi;

		fi;

		# Get the short symbolic ref
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up
		branch="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo 'unknown')";

		[ -n "${branch}" ] && branch=" ${branch}";
		[ -n "${flags}" ] && flags=" ${flags}";

		echo -e "${1}${branch}${2}${flags}";
	else
		return;
	fi;
};

bold='';
reset="\e[0m";
black="\e[1;30m";
blue="\e[1;34m";
cyan="\e[1;36m";
green="\e[1;32m";
orange="\e[1;33m";
purple="\e[1;35m";
red="\e[1;31m";
violet="\e[1;35m";
white="\e[1;37m";
yellow="\e[1;33m";

# Highlight the user name when logged in as root
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${orange}";
fi;

# Set the terminal title and prompt
PS1="\[${userStyle}\]\u";
PS1+="\[${reset}\]@\h";
PS1+=" ";
PS1+="\[${blue}\]\W";
PS1+="\$(prompt_git \"\[${green}\]\" \"\[${red}\]\")";
PS1+=" ";
PS1+="\[${reset}\]\$ ";
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
