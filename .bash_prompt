# Below code is heavily inspired by @mathiasbynens" prompt
# https://github.com/mathiasbynens/dotfiles

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM="gnome-256color";
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM="xterm-256color";
fi;

# Text attributes
bold="1;";
dim="2;";
underline="4;";
highlight="7;";

foreground="38;5;";
background="48;5;";

# Color schema
# An ordered list of colors to create a palette
# :Array<colorCodes>
# NOTE
# Leave empty for default color
# `38;5;colorCode` where `colorCode` is used as a foreground color
# `48;5;colorCode` where `colorCode` is used as a background color
COLOR_SCHEMA=(
	"${bold}${foreground}227" # 0. username color
	"${bold}${foreground}227" # 1. host name color
	"${bold}${foreground}043" # 2. working directory color
	"${bold}${foreground}038" # 3. git branch color
	"${highlight}${foreground}124;${bold}${background}15" # 4. git flags color
	"" # 5. prompt sign color
	"" # 6. user/host sign color
);

# Working directory
# :string
# NOTE
# Use `\w` for a full working directory
# Use `\W` for the current directory
WORKING_DIRECTORY="\W";

# Git flags
# An ordered list of signs to highlight if the branch is not clean
# :Array<string>
GIT_FLAGS=(
	"+"	# 0. uncommited files on branch
	"!"	# 1. unstaged files on branch
	"?"	# 2. untracked files on branch
	"$"	# 3. stashed files on branch
);

# Username/host sign
# The sign between the user and host names
# :string
USER_HOST_SIGN="@";

# Before-prompt sign
# :string
# NOTE
# Use `\n` to prompt in a new line
BEFORE_PROMPT_SIGN=" ";

# Prompt sign
# The sign at the beginning of a prompt command
# :string
# NOTE
# Prompt Statement variables on ss64.com
# `\$` If you are not root, inserts a "$"; if you are root, you get a "#"  (root uid = 0)
PROMPT_SIGN="\$";

# Parse colors
# A function to keep color schemas somewhat human-readable
# ${1}:colorCode
# return :string
# NOTE
# If there is no input, the function will return a reset attribute
parse_color() {
	echo -e "\[\033[${1}m\]";
};

# Parse text
# A function to parse text with attributes and reset them afterwards
# ${1}:colorCode
# ${2}:string
# return :string
parse_text() {
	if [ -n "${2}" ]; then
		if [ -n "${1}" ]; then
			echo -e "$(parse_color ${1})${2}$(parse_color)";
		else
			echo -e "${2}";
		fi;
	else
		return;
	fi;
};

prompt_git() {
	# Check if the current directory is in a Git repository
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == "0" ]; then
		local branch="";
		local flags="";

		# Get the short symbolic ref
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up
		branch="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo "unknown")";

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

			# Ensure the index is up to date
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index
			if ! $(git diff --quiet --ignore-submodules --cached); then flags+=${GIT_FLAGS[0]}; fi;

			# Check for unstaged changes
			if ! $(git diff-files --quiet --ignore-submodules --); then flags+=${GIT_FLAGS[1]}; fi;

			# Check for untracked files
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then flags+=${GIT_FLAGS[2]}; fi;

			# Check for stashed files
			if $(git rev-parse --verify refs/stash &>/dev/null); then flags+=${GIT_FLAGS[3]}; fi;

		fi;

		[ -n "${branch}" ] && branch=" ${1}${branch}";
		[ -n "${flags}" ] && flags=" ${2}${flags}";

		echo -e "${branch}${flags}";
	else
		return;
	fi;
};

# Set the terminal prompt statement
PS1="";

PS1+=$(parse_text "${COLOR_SCHEMA[0]}" "\u");
PS1+=$(parse_text "${COLOR_SCHEMA[6]}" ${USER_HOST_SIGN});
PS1+=$(parse_text "${COLOR_SCHEMA[1]}" "\h");

PS1+=" ";

PS1+=$(parse_text "${COLOR_SCHEMA[2]}" ${WORKING_DIRECTORY});

PS1+="\$(prompt_git \"$(parse_color ${COLOR_SCHEMA[3]})\" \"$(parse_color ${COLOR_SCHEMA[4]})\")$(parse_color)";

PS1+=${BEFORE_PROMPT_SIGN};
PS1+=$(parse_text "${COLOR_SCHEMA[5]}" ${PROMPT_SIGN});
PS1+=" ";

export PS1;
